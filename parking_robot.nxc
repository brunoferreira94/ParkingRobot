#define speed 60
#define low_speed 40
#define COLOR_SENSOR IN_3
#define USONIC_FRONT IN_4
#define USONIC_BACK IN_2
#define USONIC_LEFT IN_1

int flag_inicio = 0, color, colorval;
float distance, distance_back;
unsigned int raw[], norm[], scaled[];

task main()
{

    //Ligar os sensores nas entradas corretas
    SetSensorColorFull(COLOR_SENSOR);
    SetSensorLowspeed(USONIC_FRONT);
    SetSensorLowspeed(USONIC_BACK);
    SetSensorLowspeed(USONIC_LEFT);

    color = ReadSensorColorEx(COLOR_SENSOR,colorval,raw,norm,scaled);
    distance = SensorUS(USONIC_LEFT);
    distance_back = SensorUS(USONIC_BACK);


    while(flag_inicio < 9999)
    {
        color = ReadSensorColorEx(COLOR_SENSOR,colorval,raw,norm,scaled);

        //if(scaled[0]<120 && scaled[1]<100 && scaled[2]<100)
        if(colorval <= 2)
        {
            OnFwd(OUT_AC,speed);
        }
        else{
            int cont = 0;
            while(colorval > 2 && cont < 2){
                OnRev(OUT_A, low_speed);
                OnRev(OUT_C, -low_speed);
                Wait(50);
                color = ReadSensorColorEx(COLOR_SENSOR,colorval,raw,norm,scaled);
                cont++;
            }
            cont = 0;
            while(colorval > 2 && cont < 4){
                OnRev(OUT_A, -low_speed);
                OnRev(OUT_C, low_speed);
                Wait(50);
                color = ReadSensorColorEx(COLOR_SENSOR,colorval,raw,norm,scaled);
                cont++;
            }
        }

        distance = SensorUS(USONIC_LEFT);
        distance_back = SensorUS(USONIC_BACK);


        if(distance < 25){
            flag_inicio++;
            }
        if(flag_inicio > 10 && distance > 16){
            flag_inicio = 9999;
            }

    }
    
    //Gira em sentido anti-horário
    OnRev(OUT_C,75);
    OnRev(OUT_A,-75);
    Wait(500);
    //Enquanto não estiver perto o suficiente, vá em frente
    while(SensorUS(USONIC_FRONT) > 20){
         OnFwd(OUT_AC, low_speed);
    }
    
    //Gira em sentido horário
    while(SensorUS(USONIC_FRONT) > 30 && SensorUS(USONIC_BACK) > 30 && SensorUS(USONIC_LEFT) > 30){
         OnRev(OUT_C,-75);
         OnRev(OUT_A,75);
         Wait(100);
    }
    
    
     /*
    //se move em S para frente
    OnFwd(OUT_C,25);
    OnFwd(OUT_A,75);
    Wait(1750);
    OnFwd(OUT_A,15);
    OnFwd(OUT_C,75);
    Wait(900);
    
    //Gira em torno do eixo
    OnFwd(OUT_C,75);
    OnRev(OUT_A,75);
    Wait(850);
    
    //Dá ré em curva
    distance_back = SensorUS(USONIC_BACK);
    
    while(distance_back >= 5){
                        distance_back = SensorUS(USONIC_BACK);
                        NumOut(0,0,distance_back);
                        OnRev(OUT_C,75);
                        OnRev(OUT_A,25);
                        Wait(25);
                        ClearScreen();
                        }

                        Off(OUT_AC);
                        
    OnFwd(OUT_A,75);
    OnRev(OUT_C,75);
    Wait(100);
    */

}

